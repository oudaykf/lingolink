import React, { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import { testSupabaseConnection, knownUsers, directInsertUser } from '../supabase';
import ForgotPassword from './ForgotPassword';

const AuthPage = ({ onSuccess, currentLanguage, translations, onAuthenticated }) => {
  console.log('AuthPage rendered', { currentLanguage, translations });

  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    userType: 'client',
    gender: 'male',
    phone: '',
    birthdate: '',
    agreeToVerification: false
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [emailExists, setEmailExists] = useState(false);
  const [emailChecking, setEmailChecking] = useState(false);
  const [validationErrors, setValidationErrors] = useState({});
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);

  const t = (key) => translations[currentLanguage][key];

  // Google OAuth Sign In
  const handleGoogleSignIn = async () => {
    setGoogleLoading(true);
    setError('');
    
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/dashboard`
        }
      });
      
      if (error) {
        console.error('Google sign-in error:', error);
        setError('Failed to sign in with Google. Please try again.');
      }
    } catch (err) {
      console.error('Google OAuth error:', err);
      setError('Google sign-in is temporarily unavailable. Please use email/password.');
    } finally {
      setGoogleLoading(false);
    }
  };

  // Check for OAuth callback
  useEffect(() => {
    const handleAuthStateChange = async (event, session) => {
      if (event === 'SIGNED_IN' && session) {
        console.log('User signed in:', session.user);
        
        // Create user object for the app
        const user = {
          id: session.user.id,
          name: session.user.user_metadata?.full_name || session.user.email?.split('@')[0],
          email: session.user.email,
          userType: 'client', // Default for OAuth users
          avatar: session.user.user_metadata?.avatar_url
        };
        
        // Store user data
        localStorage.setItem('currentUser', JSON.stringify(user));
        
        // Call success callbacks
        if (onSuccess) onSuccess(user);
        if (onAuthenticated) onAuthenticated(user);
        
        // Redirect to dashboard
        window.location.href = '/dashboard';
      }
    };

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(handleAuthStateChange);

    return () => subscription?.unsubscribe();
  }, [onSuccess, onAuthenticated]);

  const validateForm = () => {
    const errors = {};

    // Email validation
    if (!formData.email) {
      errors.email = t('emailRequired');
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = t('emailInvalid');
    }

    // Password validation
    if (!formData.password) {
      errors.password = t('passwordRequired');
    } else if (!isLogin && formData.password.length < 8) {
      errors.password = 'Password must be at least 8 characters long';
    }

    // Registration-specific validations
    if (!isLogin) {
      if (!formData.name || formData.name.trim().length < 2) {
        errors.name = 'Full name must be at least 2 characters long';
      }

      if (!formData.phone || !/^[+]?[1-9]\d{1,14}$/.test(formData.phone.replace(/\s/g, ''))) {
        errors.phone = 'Please enter a valid phone number';
      }

      if (!formData.birthdate) {
        errors.birthdate = 'Date of birth is required';
      } else {
        const birthDate = new Date(formData.birthdate);
        const today = new Date();
        const age = today.getFullYear() - birthDate.getFullYear();
        if (age < 13) {
          errors.birthdate = 'You must be at least 13 years old';
        }
      }

      if (!formData.agreeToVerification) {
        errors.agreeToVerification = 'You must agree to identity verification';
      }
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setValidationErrors({});

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      // Try Supabase authentication first
      if (isLogin) {
        const { data, error } = await supabase.auth.signInWithPassword({
          email: formData.email,
          password: formData.password,
        });

        if (error) {
          throw new Error(error.message);
        }

        if (data.user) {
          const user = {
            id: data.user.id,
            name: data.user.user_metadata?.full_name || data.user.email?.split('@')[0],
            email: data.user.email,
            userType: 'client'
          };

          localStorage.setItem('currentUser', JSON.stringify(user));
          if (onSuccess) onSuccess(user);
          if (onAuthenticated) onAuthenticated(user);
          return;
        }
      } else {
        // Registration
        const { data, error } = await supabase.auth.signUp({
          email: formData.email,
          password: formData.password,
          options: {
            data: {
              full_name: formData.name,
              user_type: formData.userType,
              phone: formData.phone,
              gender: formData.gender,
              birthdate: formData.birthdate
            }
          }
        });

        if (error) {
          throw new Error(error.message);
        }

        if (data.user) {
          setError('Please check your email to confirm your account.');
          setIsLogin(true);
          return;
        }
      }
    } catch (authError) {
      console.error('Supabase auth error:', authError);
      
      // Fallback to mock authentication for development
      try {
        let mockUsers = [];
        const storedMockUsers = localStorage.getItem('mockUsers');
        
        if (storedMockUsers) {
          mockUsers = JSON.parse(storedMockUsers);
        } else {
          mockUsers = [
            {
              id: '1',
              name: 'Client User',
              email: 'client@example.com',
              userType: 'client',
              password: 'password123'
            },
            {
              id: '2',
              name: 'Ouday Kefi',
              email: 'ouday@example.com',
              userType: 'translator',
              password: 'password123'
            }
          ];
          localStorage.setItem('mockUsers', JSON.stringify(mockUsers));
        }

        if (isLogin) {
          const user = mockUsers.find(u => 
            u.email.toLowerCase() === formData.email.toLowerCase() && 
            u.password === formData.password
          );

          if (user) {
            localStorage.setItem('currentUser', JSON.stringify(user));
            if (onSuccess) onSuccess(user);
            if (onAuthenticated) onAuthenticated(user);
          } else {
            throw new Error('Invalid email or password');
          }
        } else {
          // Mock registration
          const newUser = {
            id: Date.now().toString(),
            name: formData.name,
            email: formData.email,
            userType: formData.userType,
            password: formData.password,
            phone: formData.phone,
            gender: formData.gender,
            birthdate: formData.birthdate
          };

          mockUsers.push(newUser);
          localStorage.setItem('mockUsers', JSON.stringify(mockUsers));
          localStorage.setItem('currentUser', JSON.stringify(newUser));
          
          if (onSuccess) onSuccess(newUser);
          if (onAuthenticated) onAuthenticated(newUser);
        }
      } catch (mockError) {
        setError(mockError.message || 'Authentication failed');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    // Clear validation errors when user starts typing
    if (validationErrors[name]) {
      setValidationErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }

    if (error) {
      setError('');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo */}
        <div className="text-center mb-8">
          <img 
            src="/new-main-logo.svg" 
            alt="LingoLink" 
            className="h-12 w-auto mx-auto mb-4"
          />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">
            {isLogin ? 'Welcome back' : 'Create your account'}
          </h1>
          <p className="text-gray-600">
            {isLogin 
              ? 'Sign in to your LingoLink account' 
              : 'Join LingoLink and connect with professional translators'
            }
          </p>
        </div>

        {/* Auth Card */}
        <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-8">
          {/* Tab Switcher */}
          <div className="flex bg-gray-100 rounded-lg p-1 mb-6">
            <button
              type="button"
              onClick={() => {
                setIsLogin(true);
                setError('');
                setValidationErrors({});
              }}
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 ${
                isLogin
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Sign In
            </button>
            <button
              type="button"
              onClick={() => {
                setIsLogin(false);
                setError('');
                setValidationErrors({});
              }}
              className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 ${
                !isLogin
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Sign Up
            </button>
          </div>

          {/* Google Sign In Button */}
          <button
            type="button"
            onClick={handleGoogleSignIn}
            disabled={googleLoading}
            className="w-full flex items-center justify-center gap-3 px-4 py-3 border border-gray-300 rounded-lg bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 mb-6 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {googleLoading ? (
              <div className="w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
            ) : (
              <img 
                src="/google-icon.svg" 
                alt="Google" 
                className="w-5 h-5"
              />
            )}
            <span className="text-gray-700 font-medium">
              {googleLoading ? 'Signing in...' : 'Continue with Google'}
            </span>
          </button>

          {/* Divider */}
          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">Or continue with email</span>
            </div>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {/* Registration Fields */}
            {!isLogin && (
              <>
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                    Full Name
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${
                      validationErrors.name ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Enter your full name"
                  />
                  {validationErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{validationErrors.name}</p>
                  )}
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="gender" className="block text-sm font-medium text-gray-700 mb-1">
                      Gender
                    </label>
                    <select
                      id="gender"
                      name="gender"
                      value={formData.gender}
                      onChange={handleChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="male">Male</option>
                      <option value="female">Female</option>
                      <option value="other">Other</option>
                    </select>
                  </div>

                  <div>
                    <label htmlFor="birthdate" className="block text-sm font-medium text-gray-700 mb-1">
                      Birth Date
                    </label>
                    <input
                      type="date"
                      id="birthdate"
                      name="birthdate"
                      value={formData.birthdate}
                      onChange={handleChange}
                      className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                        validationErrors.birthdate ? 'border-red-500' : 'border-gray-300'
                      }`}
                    />
                    {validationErrors.birthdate && (
                      <p className="mt-1 text-sm text-red-600">{validationErrors.birthdate}</p>
                    )}
                  </div>
                </div>

                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                    Phone Number
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      validationErrors.phone ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="+1 (555) 123-4567"
                  />
                  {validationErrors.phone && (
                    <p className="mt-1 text-sm text-red-600">{validationErrors.phone}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="userType" className="block text-sm font-medium text-gray-700 mb-1">
                    I want to
                  </label>
                  <select
                    id="userType"
                    name="userType"
                    value={formData.userType}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="client">Hire translators</option>
                    <option value="translator">Work as a translator</option>
                  </select>
                </div>
              </>
            )}

            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email Address
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${
                  validationErrors.email ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter your email"
              />
              {validationErrors.email && (
                <p className="mt-1 text-sm text-red-600">{validationErrors.email}</p>
              )}
            </div>

            {/* Password */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                Password
              </label>
              <input
                type="password"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${
                  validationErrors.password ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder={isLogin ? "Enter your password" : "Create a password (min. 8 characters)"}
              />
              {validationErrors.password && (
                <p className="mt-1 text-sm text-red-600">{validationErrors.password}</p>
              )}
            </div>

            {/* Agreement Checkbox for Registration */}
            {!isLogin && (
              <div className="flex items-start">
                <input
                  type="checkbox"
                  id="agreeToVerification"
                  name="agreeToVerification"
                  checked={formData.agreeToVerification}
                  onChange={handleChange}
                  className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="agreeToVerification" className="ml-2 text-sm text-gray-600">
                  I agree to verify my identity and contact information after registration
                </label>
              </div>
            )}
            {validationErrors.agreeToVerification && (
              <p className="text-sm text-red-600">{validationErrors.agreeToVerification}</p>
            )}

            {/* Remember Me & Forgot Password for Login */}
            {isLogin && (
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="remember"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="remember" className="ml-2 text-sm text-gray-600">
                    Remember me
                  </label>
                </div>
                <button
                  type="button"
                  onClick={() => setShowForgotPassword(true)}
                  className="text-sm text-blue-600 hover:text-blue-500"
                >
                  Forgot password?
                </button>
              </div>
            )}

            {/* Error Message */}
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-3 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 disabled:cursor-not-allowed"
            >
              {loading ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>{isLogin ? 'Signing in...' : 'Creating account...'}</span>
                </div>
              ) : (
                <span>{isLogin ? 'Sign In' : 'Create Account'}</span>
              )}
            </button>
          </form>
        </div>

        {/* Footer */}
        <div className="text-center mt-6">
          <p className="text-sm text-gray-600">
            {isLogin ? "Don't have an account?" : "Already have an account?"}
            <button
              type="button"
              onClick={() => {
                setIsLogin(!isLogin);
                setError('');
                setValidationErrors({});
              }}
              className="ml-1 text-blue-600 hover:text-blue-500 font-medium"
            >
              {isLogin ? 'Sign up' : 'Sign in'}
            </button>
          </p>
        </div>
      </div>

      {/* Forgot Password Modal */}
      {showForgotPassword && (
        <ForgotPassword onClose={() => setShowForgotPassword(false)} />
      )}
    </div>
  );
};

export default AuthPage;